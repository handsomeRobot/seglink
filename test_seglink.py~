#encoding = utf-8
"""Read test images, and store the detection result as txt files and zip file. 
    The zip file follows the rule of ICDAR2015 Challenge4 Task1
"""
import numpy as np
import math
import tensorflow as tf # test
from tensorflow.python.ops import control_flow_ops
from tensorflow.contrib.training.python.training import evaluation
from datasets import dataset_factory
from preprocessing import ssd_vgg_preprocessing
from tf_extended import seglink, metrics
import util
import cv2
from nets import seglink_symbol, anchor_layer

slim = tf.contrib.slim
import config
from flags import FLAGS


def config_initialization():
    if not FLAGS.dataset_dir:
        raise ValueError('You must supply the dataset directory with --dataset_dir')
    tf.logging.set_verbosity(tf.logging.DEBUG)
    
    config.init_config(flags)

    util.proc.set_proc_name('test' + config.model_name)

    
def write_result(image_name, image_data, bboxes, path):
  filename = util.io.join_path(path, 'res_%s.txt'%(image_name))
  print(filename)
  lines = []
  for bbox in bboxes:
        line = "%d, %d, %d, %d, %d, %d, %d, %d\r\n"%(int(v) for v in bbox)
        lines.append(line)
  util.io.write_lines(filename, lines)

  
def eval():
    
    with tf.name_scope('test'):
        with tf.variable_scope(tf.get_variable_scope(), reuse = True):# the variables has been created in config.init_config
            image = tf.placeholder(dtype=tf.int32, shape = [None, None, 3])
            image_shape = tf.placeholder(dtype = tf.int32, shape = [3, ])
            processed_image, _, _, _, _ = ssd_vgg_preprocessing.preprocess_image(image, None, None, None, None, 
                                                       out_shape = config.image_shape,
                                                       data_format = config.data_format, 
                                                       is_training = False)
            b_image = tf.expand_dims(processed_image, axis = 0)
            b_shape = tf.expand_dims(image_shape, axis = 0)
            net = seglink_symbol.SegLinkNet(inputs = b_image, data_format = config.data_format)
            bboxes_pred = seglink.tf_seglink_to_bbox(net.seg_scores, net.link_scores, 
                                                     net.seg_offsets, 
                                                     image_shape = b_shape, 
                                                     seg_conf_threshold = config.seg_conf_threshold,
                                                     link_conf_threshold = config.link_conf_threshold)

    image_names = util.io.ls(FLAGS.dataset_dir)
    
    sess_config = tf.ConfigProto(log_device_placement = False, allow_soft_placement = True)
    if config.gpu_memory_fraction < 0:
        sess_config.gpu_options.allow_growth = True
    elif config.gpu_memory_fraction > 0:
        sess_config.gpu_options.per_process_gpu_memory_fraction = config.gpu_memory_fraction;
    
    checkpoint_dir = util.io.get_dir(FLAGS.checkpoint_path)
    logdir = util.io.join_path(FLAGS.checkpoint_path, 'test', FLAGS.dataset_name + '_' +FLAGS.dataset_split_name)
    
    saver = tf.train.Saver()
    if util.io.is_dir(FLAGS.checkpoint_path):
        checkpoint = util.tf.get_latest_ckpt(FLAGS.checkpoint_path)
    else:
        checkpoint = FLAGS.checkpoint_path
        
    tf.logging.info('testing', checkpoint)

    with tf.Session(config = sess_config) as sess:
        saver.restore(sess, checkpoint)
        checkpoint_name = util.io.get_filename(str(checkpoint));
        dump_path = util.io.join_path(logdir, checkpoint_name, 
                                      'seg_link_conf_th_%f_%f'%(config.seg_conf_threshold, config.link_conf_threshold))
        
        txt_path = util.io.join_path(dump_path,'txt')
        zip_path = util.io.join_path(dump_path, '%s_seg_link_conf_th_%f_%f.zip'%(checkpoint_name, config.seg_conf_threshold, config.link_conf_threshold))
        
        # write detection result as txt files
        def write_result_as_txt(image_name, bboxes, path):
          filename = util.io.join_path(path, 'res_%s.txt'%(image_name))
          lines = []
          for b_idx, bbox in enumerate(bboxes):
                values = [int(v) for v in bbox]
                line = "%d, %d, %d, %d, %d, %d, %d, %d\n"%tuple(values)
                lines.append(line)
          util.io.write_lines(filename, lines)
          print('result has been written to:', filename)
          

        #import os, cv2
        #resized_path = "/home/kxu/workspace/seglink/images_resized"
        #os.mkdir(resized_path)
        for iter, image_name in enumerate(image_names):
            image_data = util.img.imread(util.io.join_path(FLAGS.dataset_dir, image_name), rgb = True)
            image_name = image_name.split('.')[0]
            image_bboxes, resized = sess.run([bboxes_pred, processed_image], feed_dict = {image:image_data, image_shape:image_data.shape})
            #cv2.imwrite(os.path.join(resized_path, image_name) + ".jpg", resized)
            print('%d/%d: %s'%(iter + 1, len(image_names), image_name))
            write_result_as_txt(image_name, image_bboxes, txt_path)
                
        # create zip file for icdar2015
        cmd = 'cd %s;zip -j %s %s/*'%(dump_path, zip_path, txt_path);
        print(cmd)
        print(util.cmd.cmd(cmd))
        print("zip file created: ", util.io.join_path(dump_path, zip_path))


def main(_):
    config_initialization()
    eval()
    
    
if __name__ == '__main__':
    tf.app.run()
